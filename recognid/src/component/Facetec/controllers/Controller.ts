import Router from 'next/router';

import { EnrollmentProcessor, PhotoIDMatchProcessor } from '../processors';
import {
  TControllerProps,
  TFacetecSdk,
  TLatestNetworkResponseStatus,
  TLatestProcessor,
  TProcessor,
} from '../@types';
import {
  FaceTecIDScanResult,
  FaceTecSessionResult,
} from '../declarations/FaceTecPublicApi';
import { Config } from '../config/Config';

export class Controller {
  latestEnrollmentIdentifier = '';
  latestSessionResult = null;
  latestIDScanResult = null;
  latestProcessor: TLatestProcessor;

  constructor(
    private sdk: TFacetecSdk,
    private cfg: Config,
    private controller: TControllerProps
  ) {
    this.cfg.initializeFromAutogeneratedConfig((initializedSuccessfully) => {
      if (initializedSuccessfully) {
        this.controller.setInitialized(true);

        switch (this.cfg.flow) {
          case 0:
            this.onEnrollUserPressed();
            break;
          case 1:
            this.onPhotoIDMatchPressed();
            break;
        }

        // AppUtilities.setVocalGuidanceSoundFiles();
      }

      console.log(
        this.sdk.getFriendlyDescriptionForFaceTecSDKStatus(sdk.getStatus())
      );
    });
  }

  private startProcess(Processor: TProcessor) {
    // AppUtilities.fadeOutMainUIAndPrepareForSession();

    this.latestEnrollmentIdentifier = this.cfg.id;
    this.latestProcessor = new Processor(this.sdk, this.cfg, this);
  }

  onEnrollUserPressed() {
    this.startProcess(EnrollmentProcessor);
  }

  onPhotoIDMatchPressed() {
    this.startProcess(PhotoIDMatchProcessor);
  }

  onVocalGuidanceSettingsButtonPressed() {
    console.log('onVocalGuidanceSettingsButtonPressed');

    // AppUtilities.setVocalGuidanceMode();
  }

  async onViewAuditTrailPressed() {
    if (this.cfg.paths.auditTrail) {
      return Router.push(this.cfg.paths.auditTrail);
    }

    console.log('Audit trail path not found');

    // AppUtilities.showAuditTrailImages(latestSessionResult, latestIDScanResult);
  }

  onComplete(
    sessionResult: FaceTecSessionResult,
    idScanResult: FaceTecIDScanResult,
    latestNetworkResponseStatus: TLatestNetworkResponseStatus
  ) {
    this.latestSessionResult = sessionResult;
    this.latestIDScanResult = idScanResult;

    // showAdditionalScreensServerIsDown();

    // console.log(this.latestSessionResult);
    // console.log(this.latestIDScanResult);

    if (this.latestProcessor.isSuccess()) {
      // AppUtilities.displayStatus('Success');
    } else {
      if (
        this.isNetworkResponseServerIsOffline(latestNetworkResponseStatus) ===
        true
      ) {
        // this.showAdditionalScreensServerIsDown();

        return;
      }
    }

    // AppUtilities.showMainUI();
  }

  clearLatestEnrollmentIdentifier() {
    this.latestEnrollmentIdentifier = '';
  }

  isNetworkResponseServerIsOffline(networkResponseStatus: number) {
    return networkResponseStatus >= 500;
  }

  onServerSessionTokenError() {
    console.log('onServerSessionTokenError');

    // AppUtilities.handleErrorGettingServerSessionToken();
  }

  showAdditionalScreensServerIsDown() {
    console.log('showAdditionalScreensServerIsDown');

    // AdditionalScreens.showServerUpGradeView();
  }
}
